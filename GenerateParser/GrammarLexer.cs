//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


	using GenerateParser.Rules;

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WS=2, GRAMMAR=3, SKIP_ACTION=4, RETURN=5, HEADER=6, GrammarName=7, 
		LexerName=8, END=9, IS=10, OR=11, OPEN=12, CLOSE=13, ASSIGN=14, RETURNBLOCK=15, 
		STRING=16, CODE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "WS", "GRAMMAR", "SKIP_ACTION", "RETURN", "HEADER", "GrammarName", 
		"LexerName", "END", "IS", "OR", "OPEN", "CLOSE", "ASSIGN", "RETURNBLOCK", 
		"STRING", "CODE"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'->'", null, "'grammar'", "'skip'", "'returns'", "'@header'", null, 
		null, "';'", "':'", "'|'", "'['", "']'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WS", "GRAMMAR", "SKIP_ACTION", "RETURN", "HEADER", "GrammarName", 
		"LexerName", "END", "IS", "OR", "OPEN", "CLOSE", "ASSIGN", "RETURNBLOCK", 
		"STRING", "CODE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', '\x8C', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x6', '\x3', '*', '\n', '\x3', '\r', 
		'\x3', '\xE', '\x3', '+', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\a', '\b', 'O', '\n', 
		'\b', '\f', '\b', '\xE', '\b', 'R', '\v', '\b', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', 'V', '\n', '\t', '\f', '\t', '\xE', '\t', 'Y', '\v', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', 'i', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', 'l', '\v', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', 't', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 'w', '\v', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '|', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x7F', '\v', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x82', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x86', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x89', '\v', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x6', 'j', 'u', '}', '\x87', '\x2', 
		'\x13', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', 
		'\x12', '#', '\x13', '\x3', '\x2', '\n', '\x5', '\x2', '\v', '\f', '\xF', 
		'\xF', '\"', '\"', '\x3', '\x2', '\x63', '|', '\x6', '\x2', '\x32', ';', 
		'\x43', '\\', '\x61', '\x61', '\x63', '|', '\x3', '\x2', '\x43', '\\', 
		'\x3', '\x2', '$', '$', '\x3', '\x2', ')', ')', '\x3', '\x2', '}', '}', 
		'\x3', '\x2', '\x7F', '\x7F', '\x2', '\x93', '\x2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '%', '\x3', '\x2', '\x2', '\x2', '\x5', 
		')', '\x3', '\x2', '\x2', '\x2', '\a', '/', '\x3', '\x2', '\x2', '\x2', 
		'\t', '\x37', '\x3', '\x2', '\x2', '\x2', '\v', '<', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x44', '\x3', '\x2', '\x2', '\x2', '\xF', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\x11', 'S', '\x3', '\x2', '\x2', '\x2', '\x13', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\\', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x19', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x62', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x1F', '\x66', '\x3', '\x2', '\x2', '\x2', '!', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '#', '\x83', '\x3', '\x2', '\x2', '\x2', '%', 
		'&', '\a', '/', '\x2', '\x2', '&', '\'', '\a', '@', '\x2', '\x2', '\'', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '(', '*', '\t', '\x2', '\x2', '\x2', 
		')', '(', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '.', '\b', '\x3', '\x2', '\x2', 
		'.', '\x6', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', 'i', '\x2', 
		'\x2', '\x30', '\x31', '\a', 't', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x63', '\x2', '\x2', '\x32', '\x33', '\a', 'o', '\x2', '\x2', '\x33', 
		'\x34', '\a', 'o', '\x2', '\x2', '\x34', '\x35', '\a', '\x63', '\x2', 
		'\x2', '\x35', '\x36', '\a', 't', '\x2', '\x2', '\x36', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x38', '\a', 'u', '\x2', '\x2', '\x38', '\x39', 
		'\a', 'm', '\x2', '\x2', '\x39', ':', '\a', 'k', '\x2', '\x2', ':', ';', 
		'\a', 'r', '\x2', '\x2', ';', '\n', '\x3', '\x2', '\x2', '\x2', '<', '=', 
		'\a', 't', '\x2', '\x2', '=', '>', '\a', 'g', '\x2', '\x2', '>', '?', 
		'\a', 'v', '\x2', '\x2', '?', '@', '\a', 'w', '\x2', '\x2', '@', '\x41', 
		'\a', 't', '\x2', '\x2', '\x41', '\x42', '\a', 'p', '\x2', '\x2', '\x42', 
		'\x43', '\a', 'u', '\x2', '\x2', '\x43', '\f', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x42', '\x2', '\x2', '\x45', '\x46', '\a', 'j', 
		'\x2', '\x2', '\x46', 'G', '\a', 'g', '\x2', '\x2', 'G', 'H', '\a', '\x63', 
		'\x2', '\x2', 'H', 'I', '\a', '\x66', '\x2', '\x2', 'I', 'J', '\a', 'g', 
		'\x2', '\x2', 'J', 'K', '\a', 't', '\x2', '\x2', 'K', '\xE', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'P', '\t', '\x3', '\x2', '\x2', 'M', 'O', '\t', '\x4', 
		'\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'Q', '\x10', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'W', '\t', '\x5', '\x2', '\x2', 'T', 'V', '\t', 
		'\x4', '\x2', '\x2', 'U', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'X', '\x12', '\x3', '\x2', '\x2', '\x2', 'Y', 'W', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', '=', '\x2', '\x2', '[', '\x14', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '<', '\x2', '\x2', ']', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\a', '~', '\x2', '\x2', '_', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x61', '\a', ']', '\x2', '\x2', '\x61', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '_', '\x2', 
		'\x2', '\x63', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'?', '\x2', '\x2', '\x65', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'j', '\x5', '\x19', '\r', '\x2', 'g', 'i', '\v', '\x2', '\x2', '\x2', 
		'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 
		'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\a', '\"', '\x2', '\x2', 'n', 'o', '\x5', '\xF', '\b', '\x2', 
		'o', 'p', '\x5', '\x1B', '\xE', '\x2', 'p', ' ', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'u', '\t', '\x6', '\x2', '\x2', 'r', 't', '\v', '\x2', '\x2', 
		'\x2', 's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'x', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'x', '\x82', '\t', '\x6', '\x2', '\x2', 'y', '}', '\t', '\a', '\x2', 
		'\x2', 'z', '|', '\v', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '\x7F', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x82', '\t', '\a', '\x2', '\x2', '\x81', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x81', 'y', '\x3', '\x2', '\x2', '\x2', '\x82', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x87', '\t', '\b', '\x2', '\x2', '\x84', '\x86', '\v', 
		'\x2', '\x2', '\x2', '\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\t', '\t', '\x2', '\x2', '\x8B', '$', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x2', '+', 'P', 'W', 'j', 'u', '}', '\x81', '\x87', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
