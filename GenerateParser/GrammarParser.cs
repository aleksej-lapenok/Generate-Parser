//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


	using GenerateParser.Rules;

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class GrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, WS=2, GRAMMAR=3, SKIP_ACTION=4, RETURN=5, HEADER=6, GrammarName=7, 
		LexerName=8, END=9, IS=10, OR=11, OPEN=12, CLOSE=13, ASSIGN=14, RETURNBLOCK=15, 
		STRING=16, CODE=17;
	public const int
		RULE_file = 0, RULE_header = 1, RULE_line = 2, RULE_grammarRule = 3, RULE_grammarRuleArg = 4, 
		RULE_productions = 5, RULE_productionsArg = 6, RULE_production = 7, RULE_productionArg = 8, 
		RULE_productionArgTail = 9, RULE_grammarName = 10, RULE_lexerToken = 11, 
		RULE_lexerRuleName = 12, RULE_lexerRule = 13;
	public static readonly string[] ruleNames = {
		"file", "header", "line", "grammarRule", "grammarRuleArg", "productions", 
		"productionsArg", "production", "productionArg", "productionArgTail", 
		"grammarName", "lexerToken", "lexerRuleName", "lexerRule"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", null, "'grammar'", "'skip'", "'returns'", "'@header'", null, 
		null, "';'", "':'", "'|'", "'['", "']'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "WS", "GRAMMAR", "SKIP_ACTION", "RETURN", "HEADER", "GrammarName", 
		"LexerName", "END", "IS", "OR", "OPEN", "CLOSE", "ASSIGN", "RETURNBLOCK", 
		"STRING", "CODE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode GRAMMAR() { return GetToken(GrammarParser.GRAMMAR, 0); }
		public ITerminalNode LexerName() { return GetToken(GrammarParser.LexerName, 0); }
		public ITerminalNode END() { return GetToken(GrammarParser.END, 0); }
		public ITerminalNode Eof() { return GetToken(GrammarParser.Eof, 0); }
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(GRAMMAR);
			State = 29; Match(LexerName);
			State = 30; Match(END);
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HEADER) {
				{
				State = 31; header();
				}
			}

			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 34; line();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==GrammarName || _la==LexerName );
			State = 39; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public ITerminalNode HEADER() { return GetToken(GrammarParser.HEADER, 0); }
		public ITerminalNode CODE() { return GetToken(GrammarParser.CODE, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitHeader(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 2, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(HEADER);
			State = 42; Match(CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public Rule ret;
		public GrammarRuleContext _grammarRule;
		public GrammarRuleArgContext _grammarRuleArg;
		public LexerRuleContext _lexerRule;
		public GrammarRuleContext grammarRule() {
			return GetRuleContext<GrammarRuleContext>(0);
		}
		public ITerminalNode END() { return GetToken(GrammarParser.END, 0); }
		public GrammarRuleArgContext grammarRuleArg() {
			return GetRuleContext<GrammarRuleArgContext>(0);
		}
		public LexerRuleContext lexerRule() {
			return GetRuleContext<LexerRuleContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 4, RULE_line);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; _localctx._grammarRule = grammarRule();
				State = 45; Match(END);
				_localctx.ret = _localctx._grammarRule.ret;
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; _localctx._grammarRuleArg = grammarRuleArg();
				State = 49; Match(END);
				_localctx.ret = _localctx._grammarRuleArg.ret;
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52; _localctx._lexerRule = lexerRule();
				State = 53; Match(END);
				_localctx.ret = _localctx._lexerRule.ret;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarRuleContext : ParserRuleContext {
		public GrammarRule ret;
		public GrammarNameContext _grammarName;
		public ProductionsContext _productions;
		public GrammarNameContext grammarName() {
			return GetRuleContext<GrammarNameContext>(0);
		}
		public ITerminalNode IS() { return GetToken(GrammarParser.IS, 0); }
		public ProductionsContext productions() {
			return GetRuleContext<ProductionsContext>(0);
		}
		public GrammarRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGrammarRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGrammarRule(this);
		}
	}

	[RuleVersion(0)]
	public GrammarRuleContext grammarRule() {
		GrammarRuleContext _localctx = new GrammarRuleContext(Context, State);
		EnterRule(_localctx, 6, RULE_grammarRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; _localctx._grammarName = grammarName();
			State = 59; Match(IS);
			State = 60; _localctx._productions = productions();
			_localctx.ret = new GrammarRule(_localctx._grammarName.text, _localctx._productions.ret);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarRuleArgContext : ParserRuleContext {
		public Rule ret;
		public GrammarNameContext _grammarName;
		public IToken _RETURNBLOCK;
		public ProductionsArgContext _productionsArg;
		public GrammarNameContext grammarName() {
			return GetRuleContext<GrammarNameContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(GrammarParser.RETURN, 0); }
		public ITerminalNode RETURNBLOCK() { return GetToken(GrammarParser.RETURNBLOCK, 0); }
		public ITerminalNode IS() { return GetToken(GrammarParser.IS, 0); }
		public ProductionsArgContext productionsArg() {
			return GetRuleContext<ProductionsArgContext>(0);
		}
		public GrammarRuleArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarRuleArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGrammarRuleArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGrammarRuleArg(this);
		}
	}

	[RuleVersion(0)]
	public GrammarRuleArgContext grammarRuleArg() {
		GrammarRuleArgContext _localctx = new GrammarRuleArgContext(Context, State);
		EnterRule(_localctx, 8, RULE_grammarRuleArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; _localctx._grammarName = grammarName();
			State = 64; Match(RETURN);
			State = 65; _localctx._RETURNBLOCK = Match(RETURNBLOCK);
			State = 66; Match(IS);
			State = 67; _localctx._productionsArg = productionsArg();
			_localctx.ret = new RuleWithCode(_localctx._grammarName.text,(_localctx._RETURNBLOCK!=null?_localctx._RETURNBLOCK.Text:null),_localctx._productionsArg.ret);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionsContext : ParserRuleContext {
		public Productions ret;
		public ProductionContext _production;
		public ProductionsContext _productions;
		public ProductionContext production() {
			return GetRuleContext<ProductionContext>(0);
		}
		public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public ProductionsContext productions() {
			return GetRuleContext<ProductionsContext>(0);
		}
		public ProductionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProductions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProductions(this);
		}
	}

	[RuleVersion(0)]
	public ProductionsContext productions() {
		ProductionsContext _localctx = new ProductionsContext(Context, State);
		EnterRule(_localctx, 10, RULE_productions);
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 70; _localctx._production = production();
				_localctx.ret = new Productions(_localctx._production.ret);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; _localctx._production = production();
				State = 74; Match(OR);
				State = 75; _localctx._productions = productions();
				_localctx.ret = new Productions(_localctx._production.ret, _localctx._productions.ret);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionsArgContext : ParserRuleContext {
		public ProductionsWithCode ret;
		public ProductionArgContext _productionArg;
		public ProductionsArgContext _productionsArg;
		public ProductionArgContext productionArg() {
			return GetRuleContext<ProductionArgContext>(0);
		}
		public ITerminalNode OR() { return GetToken(GrammarParser.OR, 0); }
		public ProductionsArgContext productionsArg() {
			return GetRuleContext<ProductionsArgContext>(0);
		}
		public ProductionsArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productionsArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProductionsArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProductionsArg(this);
		}
	}

	[RuleVersion(0)]
	public ProductionsArgContext productionsArg() {
		ProductionsArgContext _localctx = new ProductionsArgContext(Context, State);
		EnterRule(_localctx, 12, RULE_productionsArg);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80; _localctx._productionArg = productionArg();
				_localctx.ret = new ProductionsWithCode(_localctx._productionArg.ret);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; _localctx._productionArg = productionArg();
				State = 84; Match(OR);
				State = 85; _localctx._productionsArg = productionsArg();
				_localctx.ret = new ProductionsWithCode(_localctx._productionArg.ret,_localctx._productionsArg.ret);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionContext : ParserRuleContext {
		public Production ret;
		public GrammarNameContext _grammarName;
		public GrammarNameContext var;
		public LexerTokenContext _lexerToken;
		public ProductionContext _production;
		public GrammarNameContext[] grammarName() {
			return GetRuleContexts<GrammarNameContext>();
		}
		public GrammarNameContext grammarName(int i) {
			return GetRuleContext<GrammarNameContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		public LexerTokenContext lexerToken() {
			return GetRuleContext<LexerTokenContext>(0);
		}
		public ProductionContext production() {
			return GetRuleContext<ProductionContext>(0);
		}
		public ProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_production; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProduction(this);
		}
	}

	[RuleVersion(0)]
	public ProductionContext production() {
		ProductionContext _localctx = new ProductionContext(Context, State);
		EnterRule(_localctx, 14, RULE_production);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; _localctx._grammarName = grammarName();
				_localctx.ret = new Production(_localctx._grammarName.text);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 93; _localctx.var = _localctx._grammarName = grammarName();
				State = 94; Match(ASSIGN);
				}
				State = 96; _localctx._grammarName = grammarName();
				_localctx.ret = new Production(_localctx._grammarName.text, _localctx.var.text);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 99; _localctx._lexerToken = lexerToken();
				_localctx.ret = new Production(_localctx._lexerToken.text);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 102; _localctx.var = grammarName();
				State = 103; Match(ASSIGN);
				}
				State = 105; _localctx._lexerToken = lexerToken();
				_localctx.ret = new Production(_localctx._lexerToken.text, _localctx.var.text);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 108; _localctx._grammarName = grammarName();
				State = 109; _localctx._production = production();
				_localctx.ret =  new Production(_localctx._grammarName.text,_localctx._production.ret);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 112; _localctx.var = _localctx._grammarName = grammarName();
				State = 113; Match(ASSIGN);
				}
				State = 115; _localctx._grammarName = grammarName();
				State = 116; _localctx._production = production();
				_localctx.ret =  new Production(_localctx._grammarName.text, _localctx.var.text,_localctx._production.ret);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 119; _localctx._lexerToken = lexerToken();
				State = 120; _localctx._production = production();
				_localctx.ret = new Production(_localctx._lexerToken.text,_localctx._production.ret);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 123; _localctx.var = grammarName();
				State = 124; Match(ASSIGN);
				}
				State = 126; _localctx._lexerToken = lexerToken();
				State = 127; _localctx._production = production();
				_localctx.ret = new Production(_localctx._lexerToken.text, _localctx.var.text,_localctx._production.ret);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				_localctx.ret = new Production();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionArgContext : ParserRuleContext {
		public ProductionWithCode ret;
		public GrammarNameContext _grammarName;
		public IToken _CODE;
		public GrammarNameContext var;
		public LexerTokenContext _lexerToken;
		public ProductionArgTailContext p;
		public GrammarNameContext[] grammarName() {
			return GetRuleContexts<GrammarNameContext>();
		}
		public GrammarNameContext grammarName(int i) {
			return GetRuleContext<GrammarNameContext>(i);
		}
		public ITerminalNode CODE() { return GetToken(GrammarParser.CODE, 0); }
		public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		public LexerTokenContext lexerToken() {
			return GetRuleContext<LexerTokenContext>(0);
		}
		public ProductionArgTailContext productionArgTail() {
			return GetRuleContext<ProductionArgTailContext>(0);
		}
		public ProductionArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productionArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProductionArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProductionArg(this);
		}
	}

	[RuleVersion(0)]
	public ProductionArgContext productionArg() {
		ProductionArgContext _localctx = new ProductionArgContext(Context, State);
		EnterRule(_localctx, 16, RULE_productionArg);
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 133; _localctx._grammarName = grammarName();
				State = 134; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._grammarName.text, _localctx._grammarName.text, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 137; _localctx.var = _localctx._grammarName = grammarName();
				State = 138; Match(ASSIGN);
				}
				State = 140; _localctx._grammarName = grammarName();
				State = 141; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._grammarName.text, _localctx.var.text, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 144; _localctx._lexerToken = lexerToken();
				State = 145; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._lexerToken.text, _localctx._lexerToken.text, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 148; _localctx.var = grammarName();
				State = 149; Match(ASSIGN);
				}
				State = 151; _localctx._lexerToken = lexerToken();
				State = 152; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._lexerToken.text, _localctx.var.text, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 155; _localctx._grammarName = grammarName();
				State = 156; _localctx.p = productionArgTail();
				State = 157; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._grammarName.text, _localctx._grammarName.text, _localctx.p.ret, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 160; _localctx.var = _localctx._grammarName = grammarName();
				State = 161; Match(ASSIGN);
				}
				State = 163; _localctx._grammarName = grammarName();
				State = 164; _localctx.p = productionArgTail();
				State = 165; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._grammarName.text, _localctx.var.text, _localctx.p.ret, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 168; _localctx._lexerToken = lexerToken();
				State = 169; _localctx.p = productionArgTail();
				State = 170; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._lexerToken.text, _localctx._lexerToken.text, _localctx.p.ret, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 173; _localctx.var = grammarName();
				State = 174; Match(ASSIGN);
				}
				State = 176; _localctx._lexerToken = lexerToken();
				State = 177; _localctx.p = productionArgTail();
				State = 178; _localctx._CODE = Match(CODE);
				_localctx.ret =  new ProductionWithCode(_localctx._lexerToken.text, _localctx.var.text, _localctx.p.ret, (_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 181; _localctx._CODE = Match(CODE);
				_localctx.ret = new ProductionWithCode((_localctx._CODE!=null?_localctx._CODE.Text:null));
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProductionArgTailContext : ParserRuleContext {
		public ProductionWithCode ret;
		public GrammarNameContext _grammarName;
		public GrammarNameContext var;
		public LexerTokenContext _lexerToken;
		public ProductionArgTailContext p;
		public GrammarNameContext[] grammarName() {
			return GetRuleContexts<GrammarNameContext>();
		}
		public GrammarNameContext grammarName(int i) {
			return GetRuleContext<GrammarNameContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(GrammarParser.ASSIGN, 0); }
		public LexerTokenContext lexerToken() {
			return GetRuleContext<LexerTokenContext>(0);
		}
		public ProductionArgTailContext productionArgTail() {
			return GetRuleContext<ProductionArgTailContext>(0);
		}
		public ProductionArgTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_productionArgTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterProductionArgTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitProductionArgTail(this);
		}
	}

	[RuleVersion(0)]
	public ProductionArgTailContext productionArgTail() {
		ProductionArgTailContext _localctx = new ProductionArgTailContext(Context, State);
		EnterRule(_localctx, 18, RULE_productionArgTail);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185; _localctx._grammarName = grammarName();
				_localctx.ret = new ProductionWithCode(_localctx._grammarName.text,_localctx._grammarName.text);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 188; _localctx.var = _localctx._grammarName = grammarName();
					State = 189; Match(ASSIGN);
					}
					break;
				}
				State = 193; _localctx._grammarName = grammarName();
				_localctx.ret = new ProductionWithCode(_localctx._grammarName.text,_localctx.var.text);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196; _localctx._lexerToken = lexerToken();
				_localctx.ret = new ProductionWithCode(_localctx._lexerToken.text,_localctx._lexerToken.text); 
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 199; _localctx.var = grammarName();
				State = 200; Match(ASSIGN);
				}
				State = 202; _localctx._lexerToken = lexerToken();
				_localctx.ret = new ProductionWithCode(_localctx._lexerToken.text,_localctx.var.text); 
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205; _localctx._grammarName = grammarName();
				State = 206; _localctx.p = productionArgTail();
				_localctx.ret = new ProductionWithCode(_localctx._grammarName.text,_localctx._grammarName.text,_localctx.p.ret);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 209; _localctx.var = _localctx._grammarName = grammarName();
				State = 210; Match(ASSIGN);
				}
				State = 212; _localctx._grammarName = grammarName();
				State = 213; _localctx.p = productionArgTail();
				_localctx.ret = new ProductionWithCode(_localctx._grammarName.text,_localctx.var.text,_localctx.p.ret);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 216; _localctx._lexerToken = lexerToken();
				State = 217; _localctx.p = productionArgTail();
				_localctx.ret = new ProductionWithCode(_localctx._lexerToken.text,_localctx._lexerToken.text,_localctx.p.ret);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 220; _localctx.var = grammarName();
				State = 221; Match(ASSIGN);
				}
				State = 223; _localctx._lexerToken = lexerToken();
				State = 224; _localctx.p = productionArgTail();
				_localctx.ret = new ProductionWithCode(_localctx._lexerToken.text,_localctx.var.text,_localctx.p.ret);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrammarNameContext : ParserRuleContext {
		public string text;
		public IToken _GrammarName;
		public ITerminalNode GrammarName() { return GetToken(GrammarParser.GrammarName, 0); }
		public GrammarNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammarName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterGrammarName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitGrammarName(this);
		}
	}

	[RuleVersion(0)]
	public GrammarNameContext grammarName() {
		GrammarNameContext _localctx = new GrammarNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_grammarName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; _localctx._GrammarName = Match(GrammarName);
			_localctx.text = (_localctx._GrammarName!=null?_localctx._GrammarName.Text:null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerTokenContext : ParserRuleContext {
		public string text;
		public LexerRuleNameContext _lexerRuleName;
		public LexerRuleNameContext lexerRuleName() {
			return GetRuleContext<LexerRuleNameContext>(0);
		}
		public LexerTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerToken; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLexerToken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLexerToken(this);
		}
	}

	[RuleVersion(0)]
	public LexerTokenContext lexerToken() {
		LexerTokenContext _localctx = new LexerTokenContext(Context, State);
		EnterRule(_localctx, 22, RULE_lexerToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; _localctx._lexerRuleName = lexerRuleName();
			_localctx.text = (_localctx._lexerRuleName!=null?TokenStream.GetText(_localctx._lexerRuleName.Start,_localctx._lexerRuleName.Stop):null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleNameContext : ParserRuleContext {
		public ITerminalNode LexerName() { return GetToken(GrammarParser.LexerName, 0); }
		public LexerRuleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRuleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLexerRuleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLexerRuleName(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleNameContext lexerRuleName() {
		LexerRuleNameContext _localctx = new LexerRuleNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_lexerRuleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(LexerName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LexerRuleContext : ParserRuleContext {
		public LexerRule ret;
		public IToken _LexerName;
		public IToken _STRING;
		public ITerminalNode LexerName() { return GetToken(GrammarParser.LexerName, 0); }
		public ITerminalNode IS() { return GetToken(GrammarParser.IS, 0); }
		public ITerminalNode STRING() { return GetToken(GrammarParser.STRING, 0); }
		public ITerminalNode SKIP_ACTION() { return GetToken(GrammarParser.SKIP_ACTION, 0); }
		public LexerRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.EnterLexerRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarListener typedListener = listener as IGrammarListener;
			if (typedListener != null) typedListener.ExitLexerRule(this);
		}
	}

	[RuleVersion(0)]
	public LexerRuleContext lexerRule() {
		LexerRuleContext _localctx = new LexerRuleContext(Context, State);
		EnterRule(_localctx, 26, RULE_lexerRule);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 237; _localctx._LexerName = Match(LexerName);
				State = 238; Match(IS);
				State = 239; _localctx._STRING = Match(STRING);
				_localctx.ret = new LexerRule((_localctx._LexerName!=null?_localctx._LexerName.Text:null), (_localctx._STRING!=null?_localctx._STRING.Text:null),false);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; _localctx._LexerName = Match(LexerName);
				State = 242; Match(IS);
				State = 243; _localctx._STRING = Match(STRING);
				State = 244; Match(T__0);
				State = 245; Match(SKIP_ACTION);
				_localctx.ret = new LexerRule((_localctx._LexerName!=null?_localctx._LexerName.Text:null),(_localctx._STRING!=null?_localctx._STRING.Text:null),true);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\xFC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '#', '\n', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'&', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\'', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', ';', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x5', '\b', '[', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\x86', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xBA', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xC2', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xE6', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xFA', '\n', 
		'\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x2', '\x2', '\x2', '\x10C', '\x2', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '+', '\x3', '\x2', '\x2', '\x2', '\x6', ':', '\x3', '\x2', '\x2', 
		'\x2', '\b', '<', '\x3', '\x2', '\x2', '\x2', '\n', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\f', 'P', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x85', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x14', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x18', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xED', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', '\x5', '\x2', 
		'\x2', '\x1F', ' ', '\a', '\n', '\x2', '\x2', ' ', '\"', '\a', '\v', '\x2', 
		'\x2', '!', '#', '\x5', '\x4', '\x3', '\x2', '\"', '!', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '%', '\x3', 
		'\x2', '\x2', '\x2', '$', '&', '\x5', '\x6', '\x4', '\x2', '%', '$', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '%', 
		'\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', 
		')', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\x2', '\x2', '\x3', 
		'*', '\x3', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\b', '\x2', '\x2', 
		',', '-', '\a', '\x13', '\x2', '\x2', '-', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x5', '\b', '\x5', '\x2', '/', '\x30', '\a', '\v', '\x2', 
		'\x2', '\x30', '\x31', '\b', '\x4', '\x1', '\x2', '\x31', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\n', '\x6', '\x2', '\x33', 
		'\x34', '\a', '\v', '\x2', '\x2', '\x34', '\x35', '\b', '\x4', '\x1', 
		'\x2', '\x35', ';', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x5', 
		'\x1C', '\xF', '\x2', '\x37', '\x38', '\a', '\v', '\x2', '\x2', '\x38', 
		'\x39', '\b', '\x4', '\x1', '\x2', '\x39', ';', '\x3', '\x2', '\x2', '\x2', 
		':', '.', '\x3', '\x2', '\x2', '\x2', ':', '\x32', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x36', '\x3', '\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x5', '\x16', '\f', '\x2', '=', '>', '\a', '\f', 
		'\x2', '\x2', '>', '?', '\x5', '\f', '\a', '\x2', '?', '@', '\b', '\x5', 
		'\x1', '\x2', '@', '\t', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x5', 
		'\x16', '\f', '\x2', '\x42', '\x43', '\a', '\a', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\x11', '\x2', '\x2', '\x44', '\x45', '\a', '\f', '\x2', 
		'\x2', '\x45', '\x46', '\x5', '\xE', '\b', '\x2', '\x46', 'G', '\b', '\x6', 
		'\x1', '\x2', 'G', '\v', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', 
		'\x10', '\t', '\x2', 'I', 'J', '\b', '\a', '\x1', '\x2', 'J', 'Q', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\x5', '\x10', '\t', '\x2', 'L', 'M', '\a', 
		'\r', '\x2', '\x2', 'M', 'N', '\x5', '\f', '\a', '\x2', 'N', 'O', '\b', 
		'\a', '\x1', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'K', '\x3', '\x2', '\x2', '\x2', 'Q', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x5', '\x12', '\n', '\x2', 'S', 
		'T', '\b', '\b', '\x1', '\x2', 'T', '[', '\x3', '\x2', '\x2', '\x2', 'U', 
		'V', '\x5', '\x12', '\n', '\x2', 'V', 'W', '\a', '\r', '\x2', '\x2', 'W', 
		'X', '\x5', '\xE', '\b', '\x2', 'X', 'Y', '\b', '\b', '\x1', '\x2', 'Y', 
		'[', '\x3', '\x2', '\x2', '\x2', 'Z', 'R', '\x3', '\x2', '\x2', '\x2', 
		'Z', 'U', '\x3', '\x2', '\x2', '\x2', '[', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x5', '\x16', '\f', '\x2', ']', '^', '\b', '\t', '\x1', 
		'\x2', '^', '\x86', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x5', '\x16', 
		'\f', '\x2', '`', '\x61', '\a', '\x10', '\x2', '\x2', '\x61', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x5', '\x16', '\f', '\x2', 
		'\x63', '\x64', '\b', '\t', '\x1', '\x2', '\x64', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\x5', '\x18', '\r', '\x2', '\x66', 'g', 
		'\b', '\t', '\x1', '\x2', 'g', '\x86', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\x5', '\x16', '\f', '\x2', 'i', 'j', '\a', '\x10', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x5', '\x18', '\r', '\x2', 
		'l', 'm', '\b', '\t', '\x1', '\x2', 'm', '\x86', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\x5', '\x16', '\f', '\x2', 'o', 'p', '\x5', '\x10', 
		'\t', '\x2', 'p', 'q', '\b', '\t', '\x1', '\x2', 'q', '\x86', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\x5', '\x16', '\f', '\x2', 's', 't', '\a', '\x10', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', '\x16', 
		'\f', '\x2', 'v', 'w', '\x5', '\x10', '\t', '\x2', 'w', 'x', '\b', '\t', 
		'\x1', '\x2', 'x', '\x86', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', 
		'\x18', '\r', '\x2', 'z', '{', '\x5', '\x10', '\t', '\x2', '{', '|', '\b', 
		'\t', '\x1', '\x2', '|', '\x86', '\x3', '\x2', '\x2', '\x2', '}', '~', 
		'\x5', '\x16', '\f', '\x2', '~', '\x7F', '\a', '\x10', '\x2', '\x2', '\x7F', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x5', '\x18', '\r', 
		'\x2', '\x81', '\x82', '\x5', '\x10', '\t', '\x2', '\x82', '\x83', '\b', 
		'\t', '\x1', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x86', '\b', '\t', '\x1', '\x2', '\x85', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '_', '\x3', '\x2', '\x2', '\x2', '\x85', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x85', 'h', '\x3', '\x2', '\x2', '\x2', '\x85', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x85', 'r', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x85', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\x5', '\x16', '\f', '\x2', '\x88', '\x89', 
		'\a', '\x13', '\x2', '\x2', '\x89', '\x8A', '\b', '\n', '\x1', '\x2', 
		'\x8A', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x16', 
		'\f', '\x2', '\x8C', '\x8D', '\a', '\x10', '\x2', '\x2', '\x8D', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x5', '\x16', '\f', '\x2', 
		'\x8F', '\x90', '\a', '\x13', '\x2', '\x2', '\x90', '\x91', '\b', '\n', 
		'\x1', '\x2', '\x91', '\xBA', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', 
		'\x5', '\x18', '\r', '\x2', '\x93', '\x94', '\a', '\x13', '\x2', '\x2', 
		'\x94', '\x95', '\b', '\n', '\x1', '\x2', '\x95', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x97', '\x5', '\x16', '\f', '\x2', '\x97', '\x98', 
		'\a', '\x10', '\x2', '\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\x5', '\x18', '\r', '\x2', '\x9A', '\x9B', '\a', '\x13', 
		'\x2', '\x2', '\x9B', '\x9C', '\b', '\n', '\x1', '\x2', '\x9C', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x5', '\x16', '\f', '\x2', 
		'\x9E', '\x9F', '\x5', '\x14', '\v', '\x2', '\x9F', '\xA0', '\a', '\x13', 
		'\x2', '\x2', '\xA0', '\xA1', '\b', '\n', '\x1', '\x2', '\xA1', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\x5', '\x16', '\f', '\x2', 
		'\xA3', '\xA4', '\a', '\x10', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA6', '\x5', '\x16', '\f', '\x2', '\xA6', '\xA7', 
		'\x5', '\x14', '\v', '\x2', '\xA7', '\xA8', '\a', '\x13', '\x2', '\x2', 
		'\xA8', '\xA9', '\b', '\n', '\x1', '\x2', '\xA9', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAB', '\x5', '\x18', '\r', '\x2', '\xAB', '\xAC', 
		'\x5', '\x14', '\v', '\x2', '\xAC', '\xAD', '\a', '\x13', '\x2', '\x2', 
		'\xAD', '\xAE', '\b', '\n', '\x1', '\x2', '\xAE', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\x5', '\x16', '\f', '\x2', '\xB0', '\xB1', 
		'\a', '\x10', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\x5', '\x18', '\r', '\x2', '\xB3', '\xB4', '\x5', '\x14', 
		'\v', '\x2', '\xB4', '\xB5', '\a', '\x13', '\x2', '\x2', '\xB5', '\xB6', 
		'\b', '\n', '\x1', '\x2', '\xB6', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xB8', '\a', '\x13', '\x2', '\x2', '\xB8', '\xBA', '\b', '\n', 
		'\x1', '\x2', '\xB9', '\x87', '\x3', '\x2', '\x2', '\x2', '\xB9', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\x96', '\x3', '\x2', '\x2', '\x2', '\xB9', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xAA', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\xBB', '\xBC', '\x5', '\x16', '\f', '\x2', '\xBC', '\xBD', 
		'\b', '\v', '\x1', '\x2', '\xBD', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xBE', '\xBF', '\x5', '\x16', '\f', '\x2', '\xBF', '\xC0', '\a', '\x10', 
		'\x2', '\x2', '\xC0', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBE', 
		'\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x5', '\x16', 
		'\f', '\x2', '\xC4', '\xC5', '\b', '\v', '\x1', '\x2', '\xC5', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x5', '\x18', '\r', '\x2', 
		'\xC7', '\xC8', '\b', '\v', '\x1', '\x2', '\xC8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xC9', '\xCA', '\x5', '\x16', '\f', '\x2', '\xCA', '\xCB', 
		'\a', '\x10', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xCD', '\x5', '\x18', '\r', '\x2', '\xCD', '\xCE', '\b', '\v', 
		'\x1', '\x2', '\xCE', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', 
		'\x5', '\x16', '\f', '\x2', '\xD0', '\xD1', '\x5', '\x14', '\v', '\x2', 
		'\xD1', '\xD2', '\b', '\v', '\x1', '\x2', '\xD2', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\x5', '\x16', '\f', '\x2', '\xD4', '\xD5', 
		'\a', '\x10', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD7', '\x5', '\x16', '\f', '\x2', '\xD7', '\xD8', '\x5', '\x14', 
		'\v', '\x2', '\xD8', '\xD9', '\b', '\v', '\x1', '\x2', '\xD9', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\x18', '\r', '\x2', 
		'\xDB', '\xDC', '\x5', '\x14', '\v', '\x2', '\xDC', '\xDD', '\b', '\v', 
		'\x1', '\x2', '\xDD', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', 
		'\x5', '\x16', '\f', '\x2', '\xDF', '\xE0', '\a', '\x10', '\x2', '\x2', 
		'\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x5', '\x18', 
		'\r', '\x2', '\xE2', '\xE3', '\x5', '\x14', '\v', '\x2', '\xE3', '\xE4', 
		'\b', '\v', '\x1', '\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xE5', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '\t', '\x2', '\x2', 
		'\xE8', '\xE9', '\b', '\f', '\x1', '\x2', '\xE9', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\x5', '\x1A', '\xE', '\x2', '\xEB', '\xEC', 
		'\b', '\r', '\x1', '\x2', '\xEC', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEE', '\a', '\n', '\x2', '\x2', '\xEE', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xEF', '\xF0', '\a', '\n', '\x2', '\x2', '\xF0', '\xF1', 
		'\a', '\f', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x12', '\x2', '\x2', 
		'\xF2', '\xFA', '\b', '\xF', '\x1', '\x2', '\xF3', '\xF4', '\a', '\n', 
		'\x2', '\x2', '\xF4', '\xF5', '\a', '\f', '\x2', '\x2', '\xF5', '\xF6', 
		'\a', '\x12', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x3', '\x2', '\x2', 
		'\xF7', '\xF8', '\a', '\x6', '\x2', '\x2', '\xF8', '\xFA', '\b', '\xF', 
		'\x1', '\x2', '\xF9', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\"', '\'', ':', 'P', 'Z', '\x85', '\xB9', '\xC1', '\xE5', '\xF9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
